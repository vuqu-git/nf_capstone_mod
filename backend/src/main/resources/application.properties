spring.application.name=backend

#connection to MongoDB
spring.data.mongodb.uri=${MONGO_DB_URI}

#connection to MySQL db
spring.datasource.url=${MYSQL_DB_URL}
spring.datasource.username=${MYSQL_DB_USER}
spring.datasource.password=${MYSQL_DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#tells Hibernate to automatically update your database schema to match your entity models at startup,
#making it ideal for development but not for production environments
spring.jpa.hibernate.ddl-auto=update

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.show-sql=true # Set to true for debugging


#connection to email server
    #spring.mail.host=smtp.gmail.com
    #spring.mail.port=587
    #spring.mail.username=${GMAIL_MAILADDRESS}
    #spring.mail.password=${GMAIL_APPPW}
    #spring.mail.properties.mail.smtp.auth=true
    #spring.mail.properties.mail.smtp.starttls.enable=true

spring.mail.host=smtp.ionos.de
spring.mail.port=587
spring.mail.username=${IONOS_MAIL_ADDRESS}
spring.mail.password=${IONOS_MAIL_PW}
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=10000

#oauth with github
spring.security.oauth2.client.registration.github.client-id=${OAUTH_GITHUB_ID}
spring.security.oauth2.client.registration.github.client-secret=${OAUTH_GITHUB_SECRET}
spring.security.oauth2.client.registration.github.scope=none

# list of approved GitHub users: exact GitHub usernames (case-sensitive)
#app.approved-github-users=
app.approved-github-users=${OAUTH_APPROVED_GITHUB_USERS}

# Your existing app URL for successful login
app.url=${OAUTH_APPURL}
#app.url=http://localhost:5173

# New property for authentication error redirection on the frontend
app.frontend-auth-error-url=${OAUTH_ERRORURL}
#app.frontend-auth-error-url=http://localhost:5173/login


# This tells Spring to serve static files from /app/static-files/ on the file system where the files will live (in our case the docker container?s file system)
# Spring will serve static files from this external folder on the file system at runtime, outside of your packaged application
# This means /app/static-files/ is typically a directory mounted as a volume or bind mount from your host (where the files actually exist) into the container.
#   If you use classpath-based serving, then the static files go into your Maven resources folder and are bundled into the jar at build time. But with file-based locations (like here the case), they live outside the built application.
spring.web.resources.static-locations=file:/app/static-files/
